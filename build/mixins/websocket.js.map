{"version":3,"sources":["mixins/websocket.js"],"names":["WebSocket","require","data","client","methods","getToken","Promise","resolve","reject","axios","method","url","then","res","status","token","establishConnection","user","sesskey","vm","window","location","href","split","console","log","ws","onerror","onopen","Client","connectionClosed","$emit","bind","catch","JSON","stringify","err"],"mappings":";;;;;AAAA,IAAMA,YAAYC,QAAQ,IAAR,CAAlB;;kBAEe;AACbC,MADa,kBACL;AACN,WAAO;AACLC,cAAQ;AADH,KAAP;AAGD,GALY;;AAMbC,WAAS;AACPC,YADO,sBACK;AACV,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCC,cAAM;AACJC,kBAAQ,KADJ;AAEJC,eAAK;AAFD,SAAN,EAGGC,IAHH,CAGQ,eAAO;AACb,cAAIC,IAAIC,MAAJ,KAAe,GAAnB,EAAwB;AACtBP,oBAAQM,IAAIX,IAAJ,CAASa,KAAjB;AACD,WAFD,MAEOP,OAAOK,IAAIX,IAAX;AACR,SAPD;AAQD,OATM,CAAP;AAUD,KAZM;AAaPc,uBAbO,+BAacC,IAbd,EAaoBC,OAbpB,EAa6B;AAClC,UAAIC,KAAK,IAAT;AACA,aAAO,KAAKd,QAAL,GAAgBO,IAAhB,CAAqB,iBAAS;AACnC,YAAID,MAAM,UAAQS,OAAOC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,GAA3B,EAAgC,CAAhC,CAAR,YAAiDR,KAAjD,IAA4DG,gBAAcA,OAAd,GAA0B,EAAtF,CAAV;AACAM,gBAAQC,GAAR,CAAY,gCAAgCd,GAA5C;;AAEA,YAAIe,KAAK,IAAI1B,SAAJ,CAAcW,GAAd,CAAT;AACA,eAAO,IAAIL,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCkB,aAAGC,OAAH,GAAanB,MAAb;AACAkB,aAAGE,MAAH,GAAY,YAAY;AACtBJ,oBAAQC,GAAR,CAAY,2BAAZ;AACAN,eAAGhB,MAAH,GAAY,IAAI0B,MAAJ,CAAWZ,IAAX,EAAiBS,EAAjB,EAAqBP,GAAGW,gBAAxB,EAA0CX,GAAGY,KAAH,CAASC,IAAT,CAAcb,EAAd,CAA1C,CAAZ;AACAZ,oBAAQY,GAAGhB,MAAX;AACD,WAJD;AAKD,SAPM,CAAP;AAQD,OAbM,EAaJ8B,KAbI,CAaE,eAAO;AACdT,gBAAQC,GAAR,CAAYS,KAAKC,SAAL,CAAeC,GAAf,EAAoB,IAApB,EAA0B,CAA1B,CAAZ;AACD,OAfM,CAAP;AAgBD,KA/BM;AAgCPN,oBAhCO,8BAgCa;AAClB,WAAK3B,MAAL,GAAc,IAAd;AACD;AAlCM;AANI,C","file":"websocket.js","sourcesContent":["const WebSocket = require('ws')\r\n\r\nexport default {\r\n  data () {\r\n    return {\r\n      client: null\r\n    }\r\n  },\r\n  methods: {\r\n    getToken () {\r\n      return new Promise((resolve, reject) => {\r\n        axios({\r\n          method: 'GET',\r\n          url: '/ws/token'\r\n        }).then(res => {\r\n          if (res.status === 200) {\r\n            resolve(res.data.token)\r\n          } else reject(res.data)\r\n        })\r\n      })\r\n    },\r\n    establishConnection (user, sesskey) {\r\n      let vm = this\r\n      return this.getToken().then(token => {\r\n        var url = `ws://${window.location.href.split('/')[2]}/ws/${token}` + (sesskey ? `/${sesskey}` : '')\r\n        console.log('Connecting to websocket at ' + url)\r\n\r\n        var ws = new WebSocket(url)\r\n        return new Promise((resolve, reject) => {\r\n          ws.onerror = reject\r\n          ws.onopen = function () {\r\n            console.log('WS Connection established')\r\n            vm.client = new Client(user, ws, vm.connectionClosed, vm.$emit.bind(vm))\r\n            resolve(vm.client)\r\n          }\r\n        })\r\n      }).catch(err => {\r\n        console.log(JSON.stringify(err, null, 2))\r\n      })\r\n    },\r\n    connectionClosed () {\r\n      this.client = null\r\n    }\r\n  }\r\n}\r\n"]}