{"version":3,"sources":["router.js"],"names":["LokiStore","require","module","exports","init","app","config","use","session","store","path","db","logErrors","expressVueMiddleware","vueOptions","set","json","urlencoded","extended","static","controllers","sync","root","forEach","controller","router","Router","console","log","default","req","res","data","error","Error","head","title","statusCode","renderVue","onError","next","debug","env"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,IAAMA,YAAYC,QAAQ,cAAR,2BAAlB;;AAEAC,OAAOC,OAAP,CAAeC,IAAf,GAAsB,UAAUC,GAAV,EAAeC,MAAf,EAAuB;AAC3C;;AAEAD,MAAIE,GAAJ,CAAQ,sBAAO,KAAP,CAAR;AACA;AACAD,SAAOE,OAAP,CAAeC,KAAf,GAAuB,IAAIT,SAAJ,CAAc,EAAEU,MAAMJ,OAAOK,EAAP,CAAUH,OAAlB,EAA2BI,WAAW,IAAtC,EAAd,CAAvB;AACAP,MAAIE,GAAJ,CAAQ,8BAAQD,OAAOE,OAAf,CAAR;;AAEA,MAAMK,uBAAuB,qBAAWT,IAAX,CAAgBE,OAAOQ,UAAvB,CAA7B;AACAT,MAAIE,GAAJ,CAAQM,oBAAR;;AAEAR,MAAIU,GAAJ,CAAQ,aAAR,EAAuB,CAAvB,EAX2C,CAWjB;AAC1BV,MAAIE,GAAJ,CAAQ,kBAAQS,IAAR,EAAR;AACAX,MAAIE,GAAJ,CAAQ,kBAAQU,UAAR,CAAmB;AACzBC,cAAU;AADe,GAAnB,CAAR;;AAIAb,MAAIE,GAAJ,CAAQ,SAAR,EAAmB,kBAAQY,MAAR,CAAe,QAAf,CAAnB;;AAEAd,MAAIE,GAAJ;;AAEA;;AAEA,MAAIa,cAAc,eAAKC,IAAL,CAAUf,OAAOgB,IAAP,GAAc,iBAAxB,CAAlB;AACAF,cAAYG,OAAZ,CAAoB,UAAUC,UAAV,EAAsB;AACxC,QAAIC,SAAS,kBAAQC,MAAR,EAAb;AACAC,YAAQC,GAAR,CAAY,QAAQJ,UAAR,GAAqB,KAAjC;AACAvB,YAAQuB,UAAR,EAAoBK,OAApB,CAA4BJ,MAA5B,EAAoCnB,MAApC;AACAD,QAAIE,GAAJ,CAAQ,GAAR,EAAakB,MAAb;AACD,GALD;;AAOA;;AAEApB,MAAIE,GAAJ,CAAQ,UAACuB,GAAD,EAAMC,GAAN,EAAc;AACpB,QAAMC,OAAO;AACXC,aAAO,IAAIC,KAAJ,CAAU,KAAV;AADI,KAAb;AAGA,QAAMpB,aAAa;AACjBqB,YAAM;AACJC,eAAO;AADH;AADW,KAAnB;AAKAL,QAAIM,UAAJ,GAAiB,GAAjB;AACAN,QAAIO,SAAJ,CAAc,WAAd,EAA2BN,IAA3B,EAAiClB,UAAjC;AACD,GAXD;;AAaAT,MAAIE,GAAJ,CAAQ,SAASgC,OAAT,CAAkBN,KAAlB,EAAyBH,GAAzB,EAA8BC,GAA9B,EAAmCS,IAAnC,EAAyC;AAC/CT,QAAIM,UAAJ,GAAiB,GAAjB;AACA,QAAIL,OAAO;AACTS,aAAOnC,OAAOoC,GAAP,KAAe,aADb;AAETT,aAAOA;AAFE,KAAX;;AAKA,QAAIF,IAAIM,UAAR,EAAoB;AAClBN,UAAIO,SAAJ,CAAc,WAAd,EAA2BN,IAA3B;AACD,KAFD,MAEO;AACLQ;AACD;AACF,GAZD;AAaD,CA3DD","file":"router.js","sourcesContent":["import express from 'express'\r\nimport expressVue from 'express-vue'\r\nimport session from 'express-session'\r\nimport glob from 'glob'\r\nimport morgan from 'morgan'\r\nimport { userAuthMiddleware } from './routes/auth/auth'\r\n\r\nconst LokiStore = require('connect-loki')(session)\r\n\r\nmodule.exports.init = function (app, config) {\r\n  // setup middleware\r\n\r\n  app.use(morgan('dev'))\r\n  // Use with the session middleware (replace express with connect if you use Connect)\r\n  config.session.store = new LokiStore({ path: config.db.session, logErrors: true })\r\n  app.use(session(config.session))\r\n\r\n  const expressVueMiddleware = expressVue.init(config.vueOptions)\r\n  app.use(expressVueMiddleware)\r\n\r\n  app.set('json spaces', 2) // pretty-print json\r\n  app.use(express.json())\r\n  app.use(express.urlencoded({\r\n    extended: true\r\n  }))\r\n\r\n  app.use('/static', express.static('static'))\r\n\r\n  app.use(userAuthMiddleware)\r\n\r\n  // register routes\r\n\r\n  let controllers = glob.sync(config.root + '/routes/**/*.js')\r\n  controllers.forEach(function (controller) {\r\n    let router = express.Router()\r\n    console.log(' + ' + controller + '...')\r\n    require(controller).default(router, config)\r\n    app.use('/', router)\r\n  })\r\n\r\n  // 404 and Error handler\r\n\r\n  app.use((req, res) => {\r\n    const data = {\r\n      error: new Error('404')\r\n    }\r\n    const vueOptions = {\r\n      head: {\r\n        title: 'Error 404'\r\n      }\r\n    }\r\n    res.statusCode = 404\r\n    res.renderVue('error.vue', data, vueOptions)\r\n  })\r\n\r\n  app.use(function onError (error, req, res, next) {\r\n    res.statusCode = 500\r\n    let data = {\r\n      debug: config.env === 'development',\r\n      error: error\r\n    }\r\n\r\n    if (res.statusCode) {\r\n      res.renderVue('error.vue', data)\r\n    } else {\r\n      next()\r\n    }\r\n  })\r\n}\r\n"]}