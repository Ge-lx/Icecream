{"version":3,"sources":["net/clientConnection.js"],"names":["ClientConnection","user","socket","onClose","on","onMessage","bind","onError","exMessage","exError","json","send","JSON","stringify","answer","payload","sendMessage","message","parse","e","console","log","action","close","error","err"],"mappings":";;;;;;;;;;IAAMA,gB;AACJ,4BAAaC,IAAb,EAAmBC,MAAnB,EAA2BC,OAA3B,EAAoC;AAAA;;AAClC,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;;AAEAA,WAAOE,EAAP,CAAU,SAAV,EAAqB,KAAKC,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAArB;AACAJ,WAAOE,EAAP,CAAU,OAAV,EAAmBD,OAAnB;AACAD,WAAOE,EAAP,CAAU,OAAV,EAAmB,KAAKG,OAAL,CAAaD,IAAb,CAAkB,IAAlB,CAAnB;AACD;;;;6BAESD,S,EAAWE,O,EAAS;AAC5B,WAAKC,SAAL,GAAiBH,SAAjB;AACA,WAAKI,OAAL,GAAeF,OAAf;AACD;;AAED;;;;gCACaG,I,EAAM;AACjB,WAAKR,MAAL,CAAYS,IAAZ,CAAiBC,KAAKC,SAAL,CAAeH,IAAf,CAAjB;AACD;;AAED;;;;sCACmBA,I,EAAM;AAAA;;AACvB,UAAII,SAAS,SAATA,MAAS,CAACC,OAAD,EAAa;AACxBL,aAAKK,OAAL,GAAeA,OAAf;AACA,cAAKC,WAAL,CAAiBN,IAAjB;AACD,OAHD;AAIA,aAAOI,OAAOR,IAAP,CAAY,IAAZ,CAAP;AACD;;;8BAEUW,O,EAAS;AAClB,UAAI;AACF,YAAIP,OAAOE,KAAKM,KAAL,CAAWD,OAAX,CAAX;AACD,OAFD,CAEE,OAAOE,CAAP,EAAU;AACV,aAAKZ,OAAL,CAAa,+BAA+BY,CAA5C;AACD;;AAEDC,cAAQC,GAAR,CAAY,KAAKpB,IAAL,GAAY,IAAZ,GAAmBW,KAAKC,SAAL,CAAeH,IAAf,CAA/B;;AAEA,cAAQA,KAAKY,MAAb;;AAIA,UAAI,KAAKd,SAAT,EAAoB,KAAKA,SAAL,CAAeE,IAAf;AACrB;;;4BAEQ;AACP,WAAKR,MAAL,CAAYqB,KAAZ;AACD;;;4BAEQC,K,EAAO;AACd,UAAI,KAAKf,OAAT,EAAkB,KAAKA,OAAL,CAAae,KAAb,EAAlB,KACKJ,QAAQK,GAAR,CAAY,KAAKxB,IAAL,GAAY,IAAZ,GAAmBuB,KAA/B;AACN;;;;;;kBAGYxB,gB","file":"clientConnection.js","sourcesContent":["class ClientConnection {\r\n  constructor (user, socket, onClose) {\r\n    this.user = user\r\n    this.socket = socket\r\n\r\n    socket.on('message', this.onMessage.bind(this))\r\n    socket.on('close', onClose)\r\n    socket.on('error', this.onError.bind(this))\r\n  }\r\n\r\n  external (onMessage, onError) {\r\n    this.exMessage = onMessage\r\n    this.exError = onError\r\n  }\r\n\r\n  // Send a message\r\n  sendMessage (json) {\r\n    this.socket.send(JSON.stringify(json))\r\n  }\r\n\r\n  // Returns an answer-function. This preserves the response-token\r\n  getAnswerFunction (json) {\r\n    var answer = (payload) => {\r\n      json.payload = payload\r\n      this.sendMessage(json)\r\n    }\r\n    return answer.bind(this)\r\n  }\r\n\r\n  onMessage (message) {\r\n    try {\r\n      var json = JSON.parse(message)\r\n    } catch (e) {\r\n      this.onError('Received invalid message: ' + e)\r\n    }\r\n\r\n    console.log(this.user + ': ' + JSON.stringify(json))\r\n\r\n    switch (json.action) {\r\n      // Handle all the shit\r\n    }\r\n\r\n    if (this.exMessage) this.exMessage(json)\r\n  }\r\n\r\n  close () {\r\n    this.socket.close()\r\n  }\r\n\r\n  onError (error) {\r\n    if (this.exError) this.exError(error)\r\n    else console.err(this.user + ': ' + error)\r\n  }\r\n}\r\n\r\nexport default ClientConnection\r\n"]}